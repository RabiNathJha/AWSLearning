AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for autoscaling of EC2 instance.
Parameters:
  UserName:
    Description: User Name
    Type: String
    Default: ''
  Environment:
    Description: Environment Type
    Type: String
    Default: dev2
  InstanceImageId:
    Description: Image ID
    Type: String
    Default: 'ami-07d0cf3af28718ef8'
  InstanceType:
    Description: Instance Type
    Type: String
    Default: t2.micro
  VpcId:
    Description: Vpc ID
    Type: AWS::EC2::VPC::Id
    Default: vpc-b7cadbcf
  CidrIp:
    Description: Cidr Ip for default VPC
    Type: String
    Default: '172.31.0.0/16'

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable public SSH access and open port 80 and 8080 inside VPC
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - 
          Description: Allowed SSH from anywhere
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - 
          Description: Open port 80 for VPC
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref CidrIp
        - 
          Description: Open port 8080 for VPC
          IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref CidrIp
      Tags:
        -
          Key: username
          Value: !Ref UserName


  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable public access of port 80 of load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - 
          Description: Open port 80 for VPC
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      Tags:
        -
          Key: username
          Value: !Ref UserName

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          -
            DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 10
              VolumeType: gp2
              Encrypted: false
        ImageId: !Ref InstanceImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref UserName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          -
            !GetAtt InstanceSecurityGroup.GroupId

  AutoScalingEC2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      AutoScalingGroupName: !Sub aws-poc-asg-${Environment}
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: '1'
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: '3'
      MinSize: '2'
      HealthCheckGracePeriod: 2
      TargetGroupARNs:
        - !Ref TargetGroupOne
      Tags:
        -
          Key: username
          Value: !Ref UserName
          PropagateAtLaunch: true

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingEC2
      Cooldown: '1'
      ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: 60
      AlarmActions:
        - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingEC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

  ALoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub aws-poc-appLoadBalancer-${Environment}
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: 
        - subnet-515c300c
        - subnet-c6c1e6a2
      Type: application
      Tags: 
        -
          Key: username
          Value: !Ref UserName
  
  TargetGroupOne:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      Port: 80
      Protocol: HTTP
      Tags: 
        -
          Key: username
          Value: !Ref UserName
      Name: !Sub aws-poc-alb-targetG-${Environment}
      TargetType: instance
      VpcId: vpc-b7cadbcf
    
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          TargetGroupArn: !Ref TargetGroupOne
          Type: forward
      LoadBalancerArn: !Ref ALoadBalancer
      Port: 80
      Protocol: HTTP
      

